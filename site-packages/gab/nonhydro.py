import sys
import numpy as np

###########################################################################

def getConstants() :
    Cp = 1004.
    Cv = 717.
    Rd = Cp - Cv
    g = 9.81
    Po = 10.**5.
    return Cp, Cv, Rd, g, Po

###########################################################################

def getSpaceDomain( testCase, dx, ds ) :
    
    if testCase == "bubble" :
        xLeft = 0.
        xRight = 10000.
        zTop = 10000.
        kap = 10.
        def zSurf(xTilde) :
            # return 1000. * np.exp( -(kap*(xTilde-6000.)/(xRight-xLeft))**2 )
            return 500. * ( 1. + np.sin( 2.*np.pi*xTilde / 5000. ) )
            # return np.zeros( np.shape(xTilde) )
        def zSurfPrime(xTilde) :
            # return -2. * ( kap*(xTilde-6000.)/(xRight-xLeft) ) * kap/(xRight-xLeft) * zSurf(xTilde)
            return np.pi/5. * np.cos( 2.*np.pi*xTilde / 5000. )
            # return np.zeros( np.shape(xTilde) )
    elif testCase == "igw" :
        xLeft = 0.
        xRight = 300000.
        zTop = 10000.
        def zSurf(xTilde) :
            return np.zeros( np.shape(xTilde) )
        def zSurfPrime(xTilde) :
            return np.zeros( np.shape(xTilde) )
    elif testCase == "densityCurrent" :
        xLeft = -25600.
        xRight = 25600.
        zTop = 6400.
        def zSurf(xTilde) :
            return np.zeros( np.shape(xTilde) )
        def zSurfPrime(xTilde) :
            return np.zeros( np.shape(xTilde) )
    elif testCase == "doubleDensityCurrent" :
        xLeft = -6400.
        xRight = 6400.
        zTop = 6400.
        def zSurf(xTilde) :
            return 1000. * np.exp( -(16.*(xTilde-1000.)/(xRight-xLeft))**2. )
            # return np.zeros( np.shape(xTilde) )
        def zSurfPrime(xTilde) :
            return -2. * 16.*(xTilde-1000.)/(xRight-xLeft) *  16./(xRight-xLeft) * zSurf(xTilde)
            # return np.zeros( np.shape(xTilde) )
    elif testCase == "movingDensityCurrent" :
        xLeft = -18000.
        xRight = 18000.
        zTop = 6400.
        def zSurf(xTilde) :
            return np.zeros( np.shape(xTilde) )
        def zSurfPrime(xTilde) :
            return np.zeros( np.shape(xTilde) )
    else :
        sys.exit( "\nError: Invalid test case string.\n" )
    
    nLev = np.int( np.round( zTop / ds ) )
    nCol = np.int( np.round( (xRight-xLeft) / dx ) )
    
    return xLeft, xRight, nLev, nCol, zTop, zSurf, zSurfPrime

###########################################################################

def getTimeDomain( testCase, dx, ds ) :
    
    maxVel = 40.
    
    if testCase == "bubble" :
        tf = 1500.
    elif testCase == "igw" :
        tf = 3000.
    elif testCase == "densityCurrent" :
        tf = 900.
    elif testCase == "doubleDensityCurrent" :
        tf = 900.
    elif testCase == "movingDensityCurrent" :
        tf = 900.
    else :
        sys.exit( "\nError: Invalid testCase string.\n" )
    
    dx = min(dx,ds)
    dt = dx / 16 / maxVel
    nTimesteps = np.int( np.round( tf/dt ) )
    dt = tf / nTimesteps
    
    return tf, dt, nTimesteps

###########################################################################

def getHeightCoordinate( zTop, zSurf, zSurfPrime ) :
    
    def s( xTilde, zTilde ) :
        return ( zTilde - zSurf(xTilde) ) / ( zTop - zSurf(xTilde) ) * zTop
    
    def dsdx( xTilde, zTilde ) :
        return ( zTilde - zTop ) * zSurfPrime(xTilde) / ( zTop - zSurf(xTilde) )**2. * zTop
    
    def dsdz( xTilde, zTilde ) :
        return zTop / ( zTop - zSurf(xTilde) )
    
    return s, dsdx, dsdz

###########################################################################