import sys
import numpy as np
import matplotlib.pyplot as plt

###########################################################################

def getDM( th='none', TH='none', m=0 ) :
    
    A = np.zeros(( len(th), len(th) ))
    B = np.zeros(( len(th), len(TH) ))
    
    if np.mod(len(th),2) == 0 :
        sys.exit("\nError: th should have an odd number of elements.\n")
    else :
        ell = np.int(np.round( ( len(th) - 1 ) / 2 ))
    
    #Functions 1 and sin(th):
    A[0,:] = 1.
    A[1,:] = np.sin(th)
    if m == 0 :
        B[0,:] = 1.
        B[1,:] = np.sin(TH)
    elif m == 1 :
        B[0,:] = 0.
        B[1,:] = np.cos(TH)
    else :
        sys.exit("\nError: m should be 0 or 1.\n")
    
    #Most of the cosine and sine functions:
    for i in range( 1, ell ) :
        A[2*i,:]   = np.cos(i*th)
        A[2*i+1,:] = np.sin((i+1)*th)
        if m == 0 :
            B[2*i,:]     = np.cos(i*TH)
            B[2*i+1,:]   = np.sin((i+1)*TH)
        elif m == 1 :
            B[2*i,:]     = -i*np.sin(i*TH)
            B[2*i+1,:]   = (i+1)*np.cos((i+1)*TH)
        else :
            sys.exit("\nError: m should be 0 or 1.\n")
    
    #Last cosine function:
    A[2*ell,:] = np.cos(ell*th)
    if m == 0 :
        B[2*ell,:] = np.cos(ell*TH)
    elif m == 1 :
        B[2*ell,:] = -ell*np.sin(ell*TH)
    else :
        sys.exit("\nError: m should be 0 or 1.\n")
    
    W = np.linalg.solve( A, B )
    
    return np.transpose( W )

###########################################################################

def testDM() :
    
    n = 11
    N = 89
    th = np.linspace( 0., 2.*np.pi, n+1 ) [ 0 : -1 ]
    TH = np.linspace( 0., 2.*np.pi, N+1 ) [ 0 : -1 ]
    
    W  = getDM( th, TH, 0 )
    Wp = getDM( th, TH, 1 )
    
    def exact(th) :
        y = np.cos( 3. * th )
        yp = -3. * np.sin( 3. * th )
        return y, yp
    
    y, yp = exact(th)
    Y, YP = exact(TH)
    
    approx1 = W.dot(y)
    approx2 = Wp.dot(y)
    plt.plot( TH, approx1-Y, '-', TH, approx2-YP, '-' )
    plt.show()

###########################################################################
