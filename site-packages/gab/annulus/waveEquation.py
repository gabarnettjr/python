import numpy as np

###########################################################################

def getSavestring( c, innerRadius, outerRadius, tf, saveDel, exp, amp, frq \
, dimSplit, phs, pol, stc, ptb, rkStages, ns, dt ) :
    
    saveString                                  \
    = 'c'    + '{0:1.2f}' . format(c)           \
    + '_ri'  + '{0:1.0f}' . format(innerRadius) \
    + '_ro'  + '{0:1.0f}' . format(outerRadius) \
    + '_tf'  + '{0:1d}'   . format(np.int(tf))  \
    + '_sd'  + '{0:1d}'   . format(saveDel)     \
    + '_exp' + '{0:1d}'   . format(np.int(exp)) \
    + '_amp' + '{0:1.2f}' . format(amp)         \
    + '_frq' + '{0:1d}'   . format(frq)                        #folder name

    saveString = saveString + '/'                    \
    + 'ds'     + '{0:1d}' . format(dimSplit)         \
    + '_phs'   + '{0:1d}' . format(phs)              \
    + '_pol'   + '{0:1d}' . format(pol)              \
    + '_stc'   + '{0:1d}' . format(stc)              \
    + '_ptb'   + '{0:1d}' . format(np.int(ptb*100.)) \
    + '_rk'    + '{0:1d}' . format(rkStages)         \
    + '_ns'    + '{0:1d}' . format(ns-2)             \
    + '_dtinv' + '{0:1d}' . format(np.int(1./dt))    \
    + '/'                                                        #file name
    
    return saveString

###########################################################################

def setGhostNodes( U \
, rhoB, rhoT, wIinner, wEinner, wIouter, wEouter, stc ) :
    
    #Enforce rho=0 on inner and outer boundaries:
    U[0,0,:]  = ( rhoB - np.sum(wIinner[1:stc,:]*U[0,1:stc,:],axis=0) ) / wIinner[0,:]
    U[0,-1,:] = ( rhoT - np.sum(wIouter[1:stc,:]*U[0,-2:-(stc+1):-1,:],axis=0) ) / wIouter[0,:]
    
    #Extrapolate u to inner and outer ghost nodes:
    U[1,0,:]  = np.sum( wEinner * U[1,1:stc+1,:], axis=0 )
    U[1,-1,:] = np.sum( wEouter * U[1,-2:-(stc+2):-1,:], axis=0 )
    
    #Extrapolate v to inner and outer ghost nodes:
    U[2,0,:]  = np.sum( wEinner * U[2,1:stc+1,:], axis=0 )
    U[2,-1,:] = np.sum( wEouter * U[2,-2:-(stc+2):-1,:], axis=0 )
    
    return U

###########################################################################

def setGhostNodesNeumann( U \
, NxBot, NyBot, NxTop, NyTop \
, TxBot, TyBot, TxTop, TyTop \
, someFactor, stc \
, Wlam, wIinner, wEinner, wDinner, wIouter, wEouter, wDouter ) :
    
    #Enforce dP/dN=0 on inner boundary:
    RHS = np.sum( wIinner*U[0,0:stc,:], axis=0 )
    RHS = someFactor * ( RHS @ Wlam )
    U[0,0,:]  = ( RHS - np.sum(wDinner[1:stc,:]*U[0,1:stc,:],axis=0) ) / wDinner[0,:]
    
    #Get uN and uT near bottom boundary:
    uN = U[1,1:stc,:]   * NxBot + U[2,1:stc,:]   * NyBot
    uT = U[1,1:stc+1,:] * TxBot + U[2,1:stc+1,:] * TyBot
    
    #Extrapolate uT to inner ghost nodes:
    uT = np.sum( wEinner * uT, axis=0 )
    
    #Enforce uN=0 on inner boundary:
    uN = - np.sum( wIinner[1:stc,:] * uN, axis=0 ) / wIinner[0,:]
    
    #Combine uT and uN on inner ghost nodes to get u and v on inner ghost nodes:
    U[1,0,:] = uT*TxBot[0,:] + uN*NxBot[0,:]
    U[2,0,:] = uT*TyBot[0,:] + uN*NyBot[0,:]
    
    #################################
    
    #Enforce dP/dN=0 on outer boundary:
    U[0,-1,:] = - np.sum(wDouter[1:stc,:]*U[0,-2:-(stc+1):-1,:],axis=0) / wDouter[0,:]
    
    #Get uN and uT near top boundary:
    uN = U[1,-2:-(stc+1):-1,:] * NxTop + U[2,-2:-(stc+1):-1,:] * NyTop
    uT = U[1,-2:-(stc+2):-1,:] * TxTop + U[2,-2:-(stc+2):-1,:] * TyTop
    
    #Extrapolate uT to outer ghost nodes:
    uT = np.sum( wEouter * uT, axis=0 )
    
    #Enforce uN=0 on outer boundary:
    uN = - np.sum( wIouter[1:stc,:] * uN, axis=0 ) / wIouter[0,:]
    
    #Combine uT and uN on outer ghost nodes to get u and v on outer ghost nodes:
    U[1,-1,:] = uT*TxTop[0,:] + uN*NxTop[0,:]
    U[2,-1,:] = uT*TyTop[0,:] + uN*NyTop[0,:]
    
    return U

###########################################################################

def odefun( t, U \
, setGhostNodes, Ds, Dlam, HV \
, Po, rhoInv, dsdth, dsdr \
, cosTh, sinTh, cosThOverR, sinThOverR ) :
    
    U = setGhostNodes( U )
    
    V = np.zeros( np.shape(U) )
    
    u_s   = Ds( U[1,:,:] )
    v_s   = Ds( U[2,:,:] )
    
    V[0,1:-1,:] = -Po *                                                \
    ( cosTh*(dsdr*u_s) - sinThOverR * ( Dlam(U[1,:,:]) + dsdth*u_s )   \
    + sinTh*(dsdr*v_s) + cosThOverR * ( Dlam(U[2,:,:]) + dsdth*v_s ) ) \
    + HV( U[0,:,:] )
    
    rho_r  = Ds( U[0,:,:] )
    rho_th = Dlam( U[0,:,:] ) + dsdth * rho_r
    rho_r  = dsdr * rho_r
    
    V[1,1:-1,:] = -rhoInv *                 \
    ( cosTh * rho_r - sinThOverR * rho_th ) \
    + HV( U[1,:,:] )
    
    V[2,1:-1,:] = -rhoInv *                 \
    ( sinTh * rho_r + cosThOverR * rho_th ) \
    + HV( U[2,:,:] )
    
    return V

###########################################################################

def odefunCartesian( t, U   \
, setGhostNodes, Dx, Dy, HV \
, Po, rhoInv ) :
    
    U = setGhostNodes( U )
    
    V = np.zeros( np.shape(U) )
    
    V[0,1:-1,:] = -Po * ( Dx( U[1,:,:] ) + Dy( U[2,:,:] ) ) \
    + HV( U[0,:,:] )
    
    V[1,1:-1,:] = -rhoInv * Dx( U[0,:,:] ) \
    + HV( U[1,:,:] )
    
    V[2,1:-1,:] = -rhoInv * Dy( U[0,:,:] ) \
    + HV( U[2,:,:] )
    
    return V

###########################################################################