import numpy as np
import math
from scipy.sparse import csr_matrix
from scipy.spatial import cKDTree

###########################################################################

def getWeights( z=0., x=np.arange(-3.,4.,1.), m=1 \
, phsDegree=5, polyDegree=3 ) :
    
    x = x - z
    
    P = np.zeros(( len(x), polyDegree+1 ))
    for j in range(polyDegree+1) :
        P[:,j] = x**j
    
    xx,yy = np.meshgrid( x, x )
    A = np.vstack(( \
        np.hstack(( np.abs(xx-yy)**phsDegree, P )), \
        np.hstack(( np.transpose(P), np.zeros((polyDegree+1,polyDegree+1)) )) \
        ))
    
    b = np.array([])
    if m == 0 :
        b = np.abs(0-x) ** phsDegree
    elif ( len(x) >= polyDegree+1 ) & ( phsDegree >= m+1 ) :
        if np.mod(m,2) == 0 :
            b = np.prod( np.arange(phsDegree-(m-1),phsDegree+1) ) * np.abs(0-x) ** (phsDegree-m)
        else :
            b = np.prod( np.arange(phsDegree-(m-1),phsDegree+1) ) * (0-x) ** (phsDegree-m) * np.sign(0-x)
    
    p = np.zeros(( polyDegree+1 ))
    if polyDegree >= m :
        p[m] = math.factorial(m)
    
    if b == np.array([]) :
        w = np.array([])
        sys.exit( "\nError: Bad parameters.\n" )
    else :
        b = np.transpose( np.hstack((b,p)) )
        w = np.linalg.solve( A, b )
        w = w[0:len(x)]
    
    return w

###########################################################################

def getDM( x='none', X='none', m=0 \
, phsDegree=5, polyDegree=3, stencilSize=7 ) :
    
    ell = len(X)
    
    ii = np.zeros(( ell, stencilSize ))
    jj = np.zeros(( ell, stencilSize ))
    w  = np.zeros(( ell, stencilSize ))
    
    xNew = np.zeros(( len(x), 1 ))
    xNew[:,0] = x
    tree = cKDTree( xNew )
    
    Xnew = np.zeros(( ell, 1 ))
    Xnew[:,0] = X
    ind = tree.query( Xnew, stencilSize )
    ind = ind[1]
    
    for i in range(ell) :
        ii[i,:] = i
        jj[i,:] = ind[i,:]
        w[i,:] = getWeights( X[i], x[ind[i,:]], m, phsDegree, polyDegree )
    
    ii = ii.flatten()
    jj = jj.flatten()
    w  = w.flatten()
    
    W = csr_matrix( (w,(ii,jj)), [ell,len(x)] )
    
    return W

###########################################################################

def getPeriodicDM( period=2*np.pi, X='none', m=1 \
, phsDegree=5, polyDegree=3, stencilSize=7 ) :
    
    ell = len(X)
    
    ii = np.zeros(( ell, stencilSize ))
    jj = np.zeros(( ell, stencilSize ))
    w  = np.zeros(( ell, stencilSize ))
    
    tmp = np.int(np.round( (stencilSize-1)/2 ))
    ind = np.arange( ell-tmp, ell )
    ind = np.hstack(( ind, np.arange(0,tmp+1) ))
    
    Xpad = np.hstack(( X[ell-tmp:ell]-period, X, X[0:tmp]+period ))
    otherInd = np.arange( 0, stencilSize )
    
    for i in range(ell) :
        ii[i,:] = i
        jj[i,:] = ind
        w[i,:] = getWeights( X[i], Xpad[otherInd], m, phsDegree, polyDegree )
        ind = ind + 1
        ind[ind>=ell] = np.mod( ind[ind>=ell], ell )
        otherInd = otherInd + 1
    
    ii = ii.flatten()
    jj = jj.flatten()
    w  = w.flatten()
    
    W = csr_matrix( (w,(ii,jj)), [len(X),len(X)] )
    
    return W

###########################################################################