import numpy as np
import math
from scipy.sparse import csr_matrix

###########################################################################

def getWeights( z, x, m, phsDegree, polyDegree ) :
    
    x = x - z
    
    P = np.zeros(( len(x), polyDegree+1 ))
    for j in range(polyDegree+1) :
        P[:,j] = x**j
    
    xx,yy = np.meshgrid( x, x )
    A = np.vstack(( \
        np.hstack(( np.abs(xx-yy)**phsDegree, P )), \
        np.hstack(( np.transpose(P), np.zeros((polyDegree+1,polyDegree+1)) )) \
        ))
    
    b = np.array([])
    if m == 0 :
        b = np.abs(0-x) ** phsDegree
    elif ( len(x) >= polyDegree+1 ) & ( phsDegree >= m+1 ) :
        if np.mod(m,2) == 0 :
            b = np.prod( np.arange(phsDegree-(m-1),phsDegree+1) ) * np.abs(0-x) ** (phsDegree-m)
        else :
            b = np.prod( np.arange(phsDegree-(m-1),phsDegree+1) ) * (0-x) ** (phsDegree-m) * np.sign(0-x)
    
    p = np.zeros(( polyDegree+1 ))
    if polyDegree >= m :
        p[m] = math.factorial(m)
    
    if b == np.array([]) :
        w = np.array([])
        sys.exit( "\nError: Bad parameters.\n" )
    else :
        b = np.transpose( np.hstack((b,p)) )
        w = np.linalg.solve( A, b )
        w = w[0:len(x)]
    
    return w

###########################################################################

def getDM( isPeriodic=0, period=2*np.pi \
, X='none', m=1, phsDegree=3, polyDegree=4, stencilSize=5 ) :
    
    ell = len(X)
    
    ii = np.zeros(( ell, stencilSize ))
    jj = np.zeros(( ell, stencilSize ))
    w  = np.zeros(( ell, stencilSize ))
    
    if isPeriodic == 1 :
        tmp = np.int(np.round( (stencilSize-1)/2 ))
        ind = np.arange( ell-tmp, ell )
        ind = np.hstack(( ind, np.arange(0,tmp+1) ))
        Xpad = np.hstack(( X[ell-tmp:ell]-period, X, X[0:tmp]+period ))
        otherInd = np.arange( 0, stencilSize )
    else :
        ind = np.arange( 0, stencilSize )
    
    for i in range(ell) :
        if isPeriodic != 1 :
            if ( i > (stencilSize-1)/2 ) & ( i < ell-(stencilSize-1)/2 ) :
                ind = ind + 1
        ii[i,:] = i
        jj[i,:] = ind
        if isPeriodic != 1 :
            w[i,:] = getWeights( X[i], X[ind], m, phsDegree, polyDegree )
        else :
            w[i,:] = getWeights( X[i], Xpad[otherInd], m, phsDegree, polyDegree )
            ind = ind + 1
            ind[ind>=ell] = np.mod( ind[ind>=ell], ell )
            otherInd = otherInd + 1
    
    ii = ii.flatten()
    jj = jj.flatten()
    w  = w.flatten()
    
    W = csr_matrix( (w,(ii,jj)), [len(X),len(X)] )
    
    return W

###########################################################################